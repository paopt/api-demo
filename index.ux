<template>
  <div class="player-container" >

    <div style="display: {{showPlayer}}" class="page bg1" @swipe="handleSwip">
      <div class="player">
        <!-- 标题 -->
        <div class="title"> 
          <text class="main-title">{{player.title}}</text>
          <marquee class="sub-title" scrollamount="30">{{player.subTitle}}</marquee>
        </div>
        <!-- 播放界面 -->
        <div class="device">
          <div class="device-item" @click="handlePre">
            <image class="device-img" src="{{playIcon.pre}}"/>
          </div>
          <stack class="device-play" @click="handlePlay">
            <image class="device-icon" src="{{player.played  ? playIcon.play : playIcon.stop}}"/>
          </stack>
          <div class="device-item" @click="handleNext">
            <image class="device-img" src="{{playIcon.next}}"/>
          </div>
        </div>
        
        <div class="player-action">
          <!-- 音量调节 -->
          <div class="player-action-item" @click="handleVolume">
            <image class="player-action-img" src="{{playIcon.volume}}"/>
          </div>
          <div style="display: {{showOpenVip}}" class="open-vip-container" @click="handGoVipCenter">
            <div class="open-vip">
              <text class="open-vip-text">开通VIP</text>
            </div>
          </div>
          
          <!-- 专辑列表 -->
          <div class="player-action-item" @click="handleAlbumList">
            <image class="player-action-img" src="{{playIcon.album}}"/>
          </div>
        </div>
      </div>
    </div>

    <!-- 专辑列表 -->
    <div style="display: {{showAlbumList}}" class="album-list">
      <div class="album-close-container">
        <image src="{{playIcon.closeAlbum}}" class="album-close" @click="handAlbumClose"/>
      </div>
      <list class="album-list-content">
        <list-item class="list-item">
          <text class="album-list-title">{{name}}</text>
        </list-item>
        <list-item for="{{(i, item) in player.list}}" tid="storyId" class="list-item" @click="handleAlbumItemClick(i)">
          <div class="item-container">
            <text class="list-item-title" style="color: {{i == player.currentIndex ? '#16C3FF' : '#FFFFFF'}}">{{item.name}}</text>
            <!-- 当前正在播放的单曲 -->
            <div show="{{i == player.currentIndex}}" class="list-item-icon">
              <image src="{{playIcon.playing}}" class="list-item-icon-img"/>
            </div>
            <!-- vip权限标识 -->
            <text show="{{(i != player.currentIndex) && (item.storyVip == 1 || item.storySvip == 1)}}" class="list-item-icon-text">VIP</text>
            
          </div>
          <div if="{{i != player.list.length}}" style="width: 224px;height:1px;background-color:#ffffff;"></div>
        </list-item>
      </list>
    </div>

    <!-- 音量调节组件 -->
    <div class="voice-volumes" style="display: {{displayVolumeControl}}">
      <div class="voice-volumes-item" @click="handleVolumesControl('minus')">
        <image class="voice-volumes-img" src="{{playIcon.minus}}"/>
      </div>
      <progress class="voice-progress" percent="{{player.volume * 100}}" type="horizontal"></progress>
      <div class="voice-volumes-item"  @click="handleVolumesControl('plus')">
        <image class="voice-volumes-img" src="{{playIcon.plus}}"/>
      </div>
    </div>

    <!-- 播放超过30分钟提示 -->
    <div class="overtime-container" style="display: {{showOverTime}}">
      <div class="overtime-tip">
        <text class="overtime-tip-text">连续收听30分钟了，休息一下吧</text>
      </div>
      <div class="overtime-logo"></div>
      <div class="overtime-btn">
        <div class="overtime-rest" @click="handRest">
          <text class="overtime-rest-text">休息一下</text>
        </div>
        <div class="overtime-goon" @click="handGoonPlay">
          <text class="overtime-goon-text">继续播放</text>
        </div>
      </div>
    </div>
    <div class="loading" if="{{showLoading}}">
      <progress class="spinner" type="circular"></progress>
    </div>
  </div>
</template>

<script>
import router from '@system.router';
import prompt from '@system.prompt'
import audio from '@system.audio'
import storage from '@system.storage'
import brightness from '@system.brightness'
import volume from '@system.volume'
import app from '@system.app'
import {
  collectDetail,
  storyDetail,
  getUserInfo,
  logout,
  checkUserLogin} from './../../lib/service.js'
import {splitString} from './../../lib/utils.js'
import {writeFile, readFile} from './../../lib/file'
import { sendBehaviorData } from '../../lib/analytics.js'

export default {
  data: {
    //图标
    playIcon: {
      pre: '/common/img/icon/icon-button-prev.png',
      play: '/common/img/icon/ic_play.png',
      stop: '/common/img/icon/ic_pause.png',
      next: '/common/img/icon/icon-button-next.png',
      volume: '/common/img/icon/icon-volume.png',
      album: '/common/img/icon/album-list.png',
      plus: '/common/img/icon/icon-volume-add.png',
      minus: '/common/img/icon/icon-volume-sub.png',
      playing: '/common/img/icon/icon-playing.png',
      closeAlbum: '/common/img/icon/close.png'
    },
    //播放器
    player: {},
    volumeList: [0, 0.4, 0.6, 0.8, 1],
    volumeControlID: null,
    showOpenVip: 'none',  //是否显示VIP按钮
    showPlayer: 'flex',   //是否显示播放器 none flex
    displayVolumeControl: 'none',  //是否显示音量调节
    showAlbumList: 'none',  //是否显示专辑列表
    showOverTime: 'none',   //是否显示播放超过30分钟
    showLoading: false, // 显示loading
  },
  onShow() {
    console.log('view/audio-player::onShow')
    console.log('view/audio-player::onShow')
    this.getUser()
  },
  onReady() {
    console.log('view/audio-player::onReady')
    this.initPlayer()
    // 播放中，不重新加载
    console.log('页面参数onPlayed：', this.onPlayed)
    if (!this.onPlayed) {
      this.loadAudio()
    }
  },
  initPlayer() {
    try {
      console.log('view/audio-player::initPlayer')
      console.log('audio-player获取player', this.$app.$def.player)
      this.player = this.$app.$def.player
      if (!this.player.played) {
        this.player.init()
      }
      this.player.collectId = this.collectId
      this.player.setTimeLimitCB(() => {
        this.showPlayer = 'none'
        this.showAlbumList = 'none'
        this.displayVolumeControl = 'none'
        this.showOverTime = 'flex'
      })
      
    } catch(err) {
      console.log('initplayer error')
    }
  },
  // 加载音频
  loadAudio() {
    console.log('view/audio-player::loadAudio', this.collectId)
    this.showLoading = true
    console.log('显示loading', this.showLoading)
    collectDetail(this.collectId).then(res => {
      if (res.code == 200) {
        let data = res.data
        this.player.title = splitString(data.name, 5)
        this.player.collectData = res.data
        console.log('合计详情', res)
        const list = data.items.map(e => {
          return {
            storyId: e.storyId,
            name: splitString(e.name, 7),
            time: e.time,
            storyVip: e.storyVip,
            storySvip: e.storySvip
          }
        })
        console.log('player setList方法', this.player.setList)
        this.player.list = list
        console.log('view/audio-player::player.list', this.player.list)
        this.getHistory().then(i => {
          console.log('view/audio-player::player.loadAudio-i', i)
          this.player.playByIndex(i, () => {
            this.showLoading = false
            console.log('播放视频：showLoading', this.showLoading)
          })
          // 播放页展示打点
          sendBehaviorData('pgv_200001', this.getBehaviorParam(i))
        }).catch(err => {
          this.showLoading = false
        })
      }
    }).catch(err => {
      console.log('获取合辑失败: ', err)
      this.showLoading = false
    })
  },
    getBehaviorParam(i) {
    // story_id、collection_id、location、unlock_collection(0,1)、type(1,2,3,4,5)
    // story_id：听书单品id
    // collection_id：归属的合辑id
    // location：位置来源串
    // unlock_collection：是否登录解锁合辑
    // 0. 普通合辑
    // 1. 解锁合辑
    // type：类型
    // 1. 限免
    // 2. 试听
    // 3. 等免
    // 4. VIP
    // 5. 福利社限免（已领取未过期）
    const story_id = this.player.list[i].storyId
    const collection_id = this.collectId
    const location = this.player.location
    const unlock_collection = 0
    let type = 4
    if (this.player.collectData.extFlag === 256) {
      type = 2
    }
    return {
      story_id,
      collection_id,
      location,
      unlock_collection,
      type
    }
  },
  // 页面消失时触发。
  onHide() {
    console.log('audio-player page onHide')
    this.player.leave()
    // this.loaded && audio.pause();
  },
  // 页面销毁时触发
  onDestroy() {
    console.log('audio-player page onDestroy')
    // audio.stop()
    clearTimeout(this.volumeControlID)
  },
  //点击icon显示音量调节
  handleVolume() {
    console.log('view/audio-player::handleVolume-displayVolumeControl', this.displayVolumeControl)
    if (this.displayVolumeControl = 'none') {
      this.displayVolumeControl = 'flex'
      this.volumeControlID = setTimeout(() => this.displayVolumeControl = 'none', 6000)
    }
    console.log('view/audio-player::handleVolume-displayVolumeControl', this.displayVolumeControl)
  },
  //调节音量
  handleVolumesControl(switchType) {
    let i = this.volumeList.findIndex(v => v == this.player.volume)
    console.log('handleVolumesControl-current-i', i)
    i += switchType === 'plus' ? 1 : -1
    if (i > this.volumeList.length - 1 || i < 0) {
      return
    }
    this.player.setVolume(this.volumeList[i])
    clearTimeout(this.volumeControlID)
    this.volumeControlID = setTimeout(() => this.displayVolumeControl = 'none', 6000)
  },
  //专辑列表
  handAlbumClose() {
    this.showPlayer = 'flex'
    this.showAlbumList = 'none'
    //collection_type(1,3,4)、unlock_collection(0,1)
    // collection_type：合辑类型（与其他的type不同）
    // 1. 收费合辑
    // 3. 限免
    // 4. 其他
    // unlock_collection：是否登录解锁合辑：
    // 0. 普通合辑
    // 1. 解锁合辑
    let collection_type = 4
    if (this.player.collectData.extFlag === 32) {
      collection_type = 1
    }
    sendBehaviorData('pgv_201001', {
      collection_type,
      unlock_collection: 0
    })
  },
  //点击播放器中的专辑列表图标
  handleAlbumList() {
    console.log('view/audio-player::handleAlbumList')
    this.showPlayer = 'none'
    this.showAlbumList = 'flex'
    // router.push({
    //   uri: 'views/album-list',
    //   params: {collectId: this.collectId, currentIndex: this.player.currentIndex}
    // })
    //关闭音量调节弹框
    if (this.displayVolumeControl == 'flex') {
      clearTimeout(this.volumeControlID)
      this.displayVolumeControl = 'none'
    }
  },
  //非vip用户显示开通vip
  handGoVipCenter() {
    this.player.stop()
    router.push({uri: 'views/open-vip', params: {
      from: 3
    }})
  },
  //点击专辑某一项
  handleAlbumItemClick(i) {
    this.handAlbumClose()
    this.player.playByIndex(i)
  },
  //获取用户信息
  getUser() {
    console.log('view/audio-player::getUserInfo')
    getUserInfo().then(res => {
      console.log('view/audio-player::getUserInfo-res', res)
      if (res.code == 200) {
        let data = res.data
        if (Array.isArray(data.vipInfoList)
          && data.vipInfoList.length > 0
          && data.vipInfoList.some(v => v.status == 1)) {
          this.showOpenVip = 'none'
        } else {
          this.showOpenVip = 'flex'
        }
      } else {
        this.showOpenVip = 'flex'
      }
    }).catch(e => {
      console.log('view/audio-player::getUserInfo-res', e)
      this.showOpenVip = 'flex'
    })
  },
  //获取播放历史
  async getHistory() {
    let local = await readFile()
    let index = 0
    let playHistory = local.playHistory
    console.log('view/audio-player::getHistory-local', local.playHistory)
    if (playHistory) {
      if (typeof playHistory == 'string' && playHistory.length > 0) {
        let collect = playHistory.split('|')
        console.log('view/audio-player::getHistory-collect', collect, this.collectId)
        if (collect.length > 0) {
          for (let i = 0; i < collect.length; i++) {
            let history = collect[i].split(':')
            console.log('view/audio-player::getHistory-history', history[0], this.collectId.toString())
            if (history[0] == this.collectId.toString()) {
              console.log('view/audio-player::getHistory-list', this.player.list, history[1])
              index = this.player.list.findIndex(l => l.storyId.toString() == history[1])
              console.log('view/audio-player::getHistory-index', index)
              if (index < 0) {
                index = 0
              }
              break
            }
          }
        }
      }
    }
    console.log('view/audio-player::getHistory-index', index)
    return index
  },
  //点击休息一下，退出应用
  handRest() {
    app.terminate()
  },
  //点击继续播放
  handGoonPlay() {
    this.showPlayer = 'flex'
    this.showAlbumList = 'none'
    this.displayVolumeControl = 'none'
    this.showOverTime = 'none'
    //超时时间递增继续播放
    this.player.overTimeLimit += this.player.overTimeLimit
    console.log('view/audio-player::handGoonPlay-overTimeLimit', this.player.overTimeLimit)
    this.player.play()
  },
  handlePre() {
    this.player.prev()
  },
  handlePlay() {
    this.player.played ? this.player.pause() : this.player.play()
  },
  handleNext() {
    this.player.next()
  }
}
</script>

<style>
@import "../../common/css/home.css";
.player-container {
  width: 240px;
  align-items: center;
}

.bg1 {
  background-color: #2B283A;
  width: 240px;
  /* height: 100%; */
  color: #000000;
  flex-direction: column;
}
.bg2 {
  flex-direction: column;
  width: 240px;
  height: 100%;
  background-color: blue;
}

.player {
  width: 240px;
  height: 240px;
  flex-direction: column;
}

.title {
  flex-direction: column;
  justify-content: center;
  align-items: center;
  width: 240px;
  height: 80px;
  font-size: 26px;
  color: #fff;
}
.main-title {
  font-size: 24px;
  color: #fff;
  text-align: center;
  text-overflow: ellipsis;
  font-weight: 500;
}
.sub-title {
  font-size: 15px;
  margin-top: 11px;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  width: 150px;
  height: 30px;
  border-radius: 20px;
  color: #FFFFFF;
  text-align: center;
  font-weight: 300;
}
.player-story-nametxt {
  font-size: 21px;
  color: #fff;
}
.player-story-source {
  flex-direction: column;
  justify-content: center;
  align-items: center;
  width: 240px;
  height: 24px;
}
.player-story-sourtxt {
  font-size: 18px;
  color: #797979;
}

.device {
  width: 240px;
  height: 84px;
  align-items: center;
  justify-content: space-between;
}

.device-item {
  width: 64px;
  height: 64px;
  justify-content: center;
  align-items: center;
}
.device-item:active {
  opacity: 0.5;
}

.device-img {
  width: 32px;
  height: 32px;
}
.player-device-album {
  position: absolute;
  left: 2px;
  top: 2px;
  width: 80px;
  height: 80px;
  border-radius: 40px;
  opacity: 0.8;
}

.device-icon {
  position: absolute;
  left: 21px;
  top: 21px;
  width: 42px;
  height: 42px;
}

.device-play {
  width: 84px;
  height: 84px;
  align-items: center;
  justify-content: center;
}

.player-device-progress {
  stroke-width: 84px;
  height: 84px;
  color: #ff9242;
  stroke-width: 5px;
  /* layer-color: #999999;
  start-angle: 0deg;
  total-angle: 360deg;
  center-x: 42px;
  center-y: 42px;
  radius: 42px; */
}

.player-action {
  width: 240px;
  height: 64px;
  border-radius: 20px;
  justify-content: space-between;
}

.player-action-item {
  width: 64px;
  height: 64px;
  justify-content: center;
  align-items: center;
}
.player-action-item:active {
  opacity: 0.5;
}

.player-action-img {
  width: 32px;
  height: 32px;
}

.voicer {
  position: fixed;
  left: 0;
  top: 0px;
  width: 240px;
  height: 240px;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  background-color: rgba(0, 0, 0, 0.5);
}

/*-----------------专辑列表开始------------------*/
  .album-list {
    width: 240px;
    height: 240px;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    background-color: rgb(0, 0, 0);
    /* padding: 15px 10px; */
    position: fixed;
    z-index: 100;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
  .album-list-content {
    width: 224px;
    height: 200px;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    /* background-color: rgba(186, 65, 8, 0.8); */
  }
  .album-list-title {
    width: 224px;
    font-size: 20px;
    font-weight: 400;
    color: #FFFFFF;
    text-align: center;
    flex-direction: column;
  }

  .list-item {
    width: 224px;
    height: 51px;
    flex-direction: column;
    /* border-bottom: 1px solid #4D4A5F; */
  }
  .item-container {
    width: 224px;
    height: 51px;
    flex-direction: row;
    justify-content: flex-start;
    align-items: center;
    position: relative;
  }

  .list-item-title {
    font-size: 17px;
    font-weight: 400;
    color: #FFFFFF;
    line-height: 23px;
  }

  .list-item-icon-text {
    width: 32px;
    height: 21px;
    background-color: #FFF9D3;
    border-radius: 5px;
    font-size: 14px;
    font-weight: bold;
    color: #915703;
    line-height: 20px;
    text-align: center;
    position: absolute;
    left: 192px;
  }
  .list-item-icon {
    width: 27px;
    height: 27px;
    position: absolute;
    left: 197px;
    /* animation-name: playingIcon;
    animation-delay: 0;
    animation-duration: 500ms;
    animation-iteration-count: infinite;
    animation-timing-function: linear; */
  }
  .list-item-icon-img {
    width: 27px;
    height: 27px;
  }
  @keyframes playingIcon {
    from {
      height: 27px;
      /* transform: scaleY(1); */
    }
    to {
      /* transform: scaleY(0.6); */
      height: 10px;
    }
  }
  .album-close-container {
    width: 240px;
    height: 40px;
    align-content: center;
    justify-content: flex-end;
  }
  .album-close {
    width: 35px;
    height: 35px;
    padding: 20px 10px 0px 10px;
    margin-right: 10px;
  }
/*----------------专辑列表结束---------------*/

/*----------------音量控制-----------------*/
.voicer-content {
  width: 240px;
  height: 186px;
  flex-direction: column;
  justify-content: center;
}

.voice-volumes {
  width: 225px;
  height: 57px;
  background-color: rgba(0, 0, 0, 1);
  border-radius: 9px;
  position: absolute;
  top: 15px;
  left: 8px;
  right: 8px;
  flex-direction: row;
  justify-content: center;
  align-items: center;
}
.voice-progress {
  width: 115px;
  height: 11px;
  border-radius: 5px;
}
.voice-volumes-item {
  width: 55px;
  height: 57px;
  flex-direction: row;
  justify-content: center;
  align-items: center;
}
.voice-volumes-img {
  width: 24px;
  height: 24px;
  padding: 12px;
}

/*---------------------VIP按钮----------------------*/
.player-loading {
  position: absolute;
  left: 30px;
  top: 30px;
  width: 24px;
  height: 25px;
}
.open-vip-container {
  height: 64px;
  justify-content: center;
  align-items: center;
}
.open-vip {
  align-items: center;
  justify-content: center;
  background-color: #FFF9D3;
  border-radius: 20px;
  height: 39px;
  width: 112px;
}
.open-vip-text {
  font-size: 20px;
  color: #915703;
  padding: 0 17px;
}

/*--------------------超过30分钟提示-----------------------*/
.overtime-container {
  width: 240px;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  background-color: rgb(0, 0, 0);
  /* padding: 15px 10px; */
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
}

.overtime-btn {
  flex-direction: row;
  position: absolute;
  bottom: 10px;
  left: 8px;
  right: 8px;
}

.overtime-rest, .overtime-goon {
  width: 111px;
  height: 60px;
  justify-content: center;
  align-items: center;
  align-content: center;
}

.overtime-rest {
  background-color: #272536;
  border-top-left-radius: 30px;
  border-bottom-left-radius: 30px;
  border-top-right-radius: 6px;
  border-bottom-right-radius: 6px;
  margin-right: 2px;
}

.overtime-goon {
  background-color: #6ECFFF;
  border-top-left-radius: 6px;
  border-bottom-left-radius: 6px;
  border-top-right-radius: 30px;
  border-bottom-right-radius: 30px;
  margin-left: 2px;
}

.overtime-rest-text, .overtime-goon-text {
  color: #ffffff;
  text-align: center;
  font-size: 21px;
}

.overtime-tip {
  width: 215px;
  height: 80px;
  background-image: url(./../../common/img/bg-overtime-tip.png);
  background-size: 215px 80px;
  background-position: center;
  background-repeat: no-repeat;
}

.overtime-tip-text {
  margin-left: 35px;
  width: 164px;
  margin-top: 10px;
  font-size: 18px;
  color: #3F3F3F;
}

.overtime-logo {
  width: 165px;
  height: 111px;
  background-image: url(./../../common/img/kada-logo.png);
}

.loading {
  position: fixed;
  top: 90px;
  left: 90px;
  border-radius: 8px;
  background-color: rgba(0, 0, 0, 0.7);
  /* background-color: red; */
  color: white;
  text-align: center;
  width: 60px;
  height: 60px;
  align-items: center;
  justify-content: center;
}

.spinner {
  width: 40px;
  height: 40px;
  color: rgb(204, 204, 204);
  stroke-width: 40px;
}

</style>
